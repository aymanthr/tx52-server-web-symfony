imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    translator:      { fallback: %locale% }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%

    form:
        resources:
            - 'SonataFormatterBundle:Form:formatter.html.twig'

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        #yui_css:
        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType

        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    spool:     { type: memory }


fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

    service:
        user_manager: sonata.user.orm.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

#sonata_news:
#    title:        Sonata Project
#    link:         http://sonata-project.org
#    description:  Cool bundles on top of Symfony2
#    salt:         'secureToken'
#    permalink_generator: sonata.news.permalink.date # sonata.news.permalink.category
#
#    comment:
#        notification:
#            emails:   [email@example.org, email2@example.org]
#            from:     no-reply@sonata-project.org
#            template: 'SonataNewsBundle:Mail:comment_notification.txt.twig'

sonata_block:
    default_contexts: [cms]
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        # Your other blocks

        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)

sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}
                wide:   { width: 500 , quality: 70}
                large:   { width: 1300 , quality: 70}
                small_crop: { width: 200, height: 200, quality: 70}
                home: { width: 360, quality: 70}
        news:
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image

            formats:
                small: { width: 150 , quality: 95}
                big:   { width: 500 , quality: 90}

        sonata_category:
            providers:
              - sonata.media.provider.image

            formats:
                preview: { width: 100, quality: 100}
                wide:    { width: 820, quality: 100}

        sonata_tag:
            providers:
              - sonata.media.provider.image

            formats:
                preview: { width: 200, quality: 70}
                wide:    { width: 820, quality: 70}
                crop:    { width: 350, height: 350, quality: 70}

        toelf_card:
            providers:
              - sonata.media.provider.image

            formats:
                preview: { width: 200, quality: 70}
                wide:    { width: 820, quality: 70}
                crop:    { width: 350, height: 350, quality: 70}
    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false

    providers:
        image:
            resizer: sonata.media.resizer.square

sonata_formatter:
    formatters:
        markdown:
            service: sonata.formatter.text.markdown
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        text:
            service: sonata.formatter.text.text
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        rawhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        richhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

ivory_ck_editor:
    configs:
#        news:
#            toolbar:                [ [ "Source", "-", "Save" ], "/", [ "Anchor" ], "/", [ "Maximize" ] ]
#            uiColor:                "#000000"
#            filebrowserUploadRoute: "my_route"
#            extraPlugins:           "wordcount"
#            # ...
#
        quiz_question:
            toolbar:                [ [ "Source", "-", "Save" ], "/", [ "Anchor" ], "/", [ "Maximize" ] ]
            uiColor:                "#000000"
            filebrowserUploadRoute: "my_route"
            extraPlugins:           "wordcount"
            # ...

sonata_admin:

    title:                TOEFL
    title_logo:           bundles/sonataadmin/logo_title.png
    templates:
        # default global templates
        layout:  SonataAdminBundle::layout.html.twig

fos_rest:
    routing_loader:
        default_format: json
    view:
        formats:
            json: true
            rss: false # removing them will also work
            xml: false
        mime_types:
            json: ['application/json; charset=UTF-8', 'application/json']


sonata_classification:
    class:
        tag:          Application\Sonata\ClassificationBundle\Entity\Tag
        category:     Application\Sonata\ClassificationBundle\Entity\Category
        collection:   Application\Sonata\ClassificationBundle\Entity\Collection

    admin:
        tag:
            class:         Application\Sonata\ClassificationBundle\Admin\TagAdmin
#            controller:   SonataAdminBundle:CRUD
#            translation:  SonataClassificationBundle
#        category:
#            class:        Sonata\ClassificationBundle\Admin\CategoryAdmin
#            controller:   SonataAdminBundle:CRUD
#            translation:  SonataClassificationBundle
#        collection:
#            class:        Sonata\ClassificationBundle\Admin\CollectionAdmin
#            controller:   SonataAdminBundle:CRUD
#            translation:  SonataClassificationBundle

#nelmio_cors:
#   defaults:
#       allow_credentials: true
#       allow_origin: []
#       allow_headers: []
#       allow_methods: []
#       expose_headers: []
#       max_age: 0
#       hosts: []
#   paths:
#    '^/api/':
#        allow_origin: ['*']
#        allow_headers: ['origin', 'content-type']
#        allow_methods: ['POST', 'PUT', 'GET', 'DELETE','OPTIONS']
#        max_age: 3600

jms_serializer:
    visitors:
        json:
            options: JSON_PRETTY_PRINT